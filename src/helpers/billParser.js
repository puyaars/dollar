const User = require('../model/User')
const Bill = require('../model/Bill')
const { dateToString, toman, buyAvg, sellAvg } = require('./core')

const sellerBillToString = async (bill, result) => {
  let { totalCommition, totalProfit } = result

  let user = await User.findOne({
    userId: bill.userId
  })

  let sopfs = await Bill.find({
    userId: bill.userId,
    closed: true,
    left: {
      $gt: 0
    },
    isSell: true
  })

  let bopfs = await Bill.find({
    userId: bill.userId,
    closed: true,
    left: {
      $gt: 0
    },
    isSell: false
  })

  let avg = await sellAvg(bill.userId)
  let bavg = await buyAvg(bill.userId)

  let final = totalProfit - totalCommition
  let ft = ''
  if (final < 0) {
    ft = 'ÿ∂ÿ±ÿ±'
    final = Math.abs(final)
  } else ft = 'ÿ≥ŸàÿØ'

  let msg = `
üë§ ŸÖÿπÿßŸÖŸÑŸá ⁄Øÿ± ⁄Øÿ±ÿßŸÖ€å ${user.name}
            
ŸÖŸÇÿØÿßÿ± üî¥ ŸÅÿ±Ÿàÿ¥  : ${bill.amount} Ÿàÿßÿ≠ÿØ ÿ®Ÿá ŸÇ€åŸÖÿ™ : ${toman(bill.price)}
            
üìà ÿ≥ŸàÿØ €åÿß ÿ∂ÿ±ÿ± ÿ¥ŸÖÿß: ${toman(final) + ' ' + ft}`

  let ops = 0
  if (bopfs.length > 0) {
    bopfs.forEach(v => {
      ops += v.left
    })
    msg += `

‚≠ïÔ∏è ÿ¥ŸÖÿß ÿ™ÿπÿØÿßÿØ ${ops} Ÿàÿßÿ≠ÿØ ŸÅÿß⁄©ÿ™Ÿàÿ± ÿ®ÿßÿ≤ ÿÆÿ±€åÿØ ÿØÿßÿ±€åÿØ.`

    msg += `
        
‚≠ïÔ∏è ŸÖ€åÿßŸÜ⁄Ø€åŸÜ ŸÅÿß⁄©ÿ™Ÿàÿ± ÿÆÿ±€åÿØ: ${toman(bavg)}
            
‚≠ïÔ∏è ⁄ÜŸÜÿß⁄ÜŸá ŸÇ€åŸÖÿ™ ŸÖÿ∏ŸÜŸá ÿ®Ÿá : ${toman(bill.awkwardness.awk)} ÿ®ÿ±ÿ≥ÿØ 
            
üì£ ŸÅÿß⁄©ÿ™Ÿàÿ± ÿÆÿ±€åÿØ ÿ¥ŸÖÿß ÿ®Ÿá ŸÇ€åŸÖÿ™: ${toman(bill.awkwardness.sellprice)} ÿ≠ÿ±ÿßÿ¨ ŸÖ€å ÿ¥ŸàÿØ. `
  } else if (sopfs.length > 0) {
    sopfs.forEach(v => {
      ops += v.left
    })
    msg += `

‚≠ïÔ∏è ÿ¥ŸÖÿß ÿ™ÿπÿØÿßÿØ ${ops} Ÿàÿßÿ≠ÿØ ŸÅÿß⁄©ÿ™Ÿàÿ± ÿ®ÿßÿ≤ ŸÅÿ±Ÿàÿ¥ ÿØÿßÿ±€åÿØ.`
    msg += `
            
‚≠ïÔ∏è ŸÖ€åÿßŸÜ⁄Ø€åŸÜ ŸÅÿß⁄©ÿ™Ÿàÿ± ŸÅÿ±Ÿàÿ¥: ${toman(avg)}
                
‚≠ïÔ∏è ⁄ÜŸÜÿß⁄ÜŸá ŸÇ€åŸÖÿ™ ŸÖÿ∏ŸÜŸá ÿ®Ÿá : ${toman(bill.awkwardness.awk)} ÿ®ÿ±ÿ≥ÿØ 
                
üì£ ŸÅÿß⁄©ÿ™Ÿàÿ± ŸÅÿ±Ÿàÿ¥ ÿ¥ŸÖÿß ÿ®Ÿá ŸÇ€åŸÖÿ™: ${toman(bill.awkwardness.sellprice)} ÿ≠ÿ±ÿßÿ¨ ŸÖ€å ÿ¥ŸàÿØ. `
  } else {
    msg += `

‚≠ïÔ∏è ŸÖÿπÿßŸÖŸÑÿßÿ™ ÿ¥ŸÖÿß ÿ®ÿ≥ÿ™Ÿá ÿ¥ÿØ Ÿà ÿØÿ± ÿ≠ÿßŸÑ ÿ≠ÿßÿ∂ÿ± ŸÅÿß⁄©ÿ™Ÿàÿ± ÿ®ÿßÿ≤€å ŸÜÿØÿßÿ±€åÿØ`
  }

  msg += `
        
üí∂ ŸÖŸàÿ¨ŸàÿØ€å ÿ¥ŸÖÿß ÿ®ÿ±ÿßÿ®ÿ± ÿßÿ≥ÿ™ ÿ®ÿß : ${toman(user.charge)}`
  return msg
}

const buyerBillToString = async (bill, result) => {
  let { totalCommition, totalProfit } = result

  let user = await User.findOne({
    userId: bill.userId
  })

  let sopfs = await Bill.find({
    userId: bill.userId,
    closed: true,
    left: {
      $gt: 0
    },
    isSell: true
  })

  let bopfs = await Bill.find({
    userId: bill.userId,
    closed: true,
    left: {
      $gt: 0
    },
    isSell: false
  })

  let avg = await buyAvg(bill.userId)
  let savg = await sellAvg(bill.userId)

  let final = totalProfit - totalCommition
  let ft = ''
  if (final < 0) {
    ft = 'ÿ∂ÿ±ÿ±'
    final = Math.abs(final)
  } else ft = 'ÿ≥ŸàÿØ'

  let msg = `
üë§ ŸÖÿπÿßŸÖŸÑŸá ⁄Øÿ± ⁄Øÿ±ÿßŸÖ€å ${user.name}
            
ŸÖŸÇÿØÿßÿ± üîµ ÿÆÿ±€åÿØ  : ${bill.amount} Ÿàÿßÿ≠ÿØ ÿ®Ÿá ŸÇ€åŸÖÿ™ : ${toman(bill.price)}
            
üìà ÿ≥ŸàÿØ €åÿß ÿ∂ÿ±ÿ± ÿ¥ŸÖÿß: ${toman(final) + ' ' + ft}`

  let ops = 0
  if (sopfs.length > 0) {
    sopfs.forEach(v => {
      ops += v.left
    })
    msg += `

‚≠ïÔ∏è ÿ¥ŸÖÿß ÿ™ÿπÿØÿßÿØ ${ops} Ÿàÿßÿ≠ÿØ ŸÅÿß⁄©ÿ™Ÿàÿ± ÿ®ÿßÿ≤ ŸÅÿ±Ÿàÿ¥ ÿØÿßÿ±€åÿØ.`
    msg += `
            
‚≠ïÔ∏è ŸÖ€åÿßŸÜ⁄Ø€åŸÜ ŸÅÿß⁄©ÿ™Ÿàÿ± ŸÅÿ±Ÿàÿ¥: ${toman(savg)}
                
‚≠ïÔ∏è ⁄ÜŸÜÿß⁄ÜŸá ŸÇ€åŸÖÿ™ ŸÖÿ∏ŸÜŸá ÿ®Ÿá : ${toman(bill.awkwardness.awk)} ÿ®ÿ±ÿ≥ÿØ 
                
üì£ ŸÅÿß⁄©ÿ™Ÿàÿ± ŸÅÿ±Ÿàÿ¥ ÿ¥ŸÖÿß ÿ®Ÿá ŸÇ€åŸÖÿ™: ${toman(bill.awkwardness.sellprice)} ÿ≠ÿ±ÿßÿ¨ ŸÖ€å ÿ¥ŸàÿØ. `
  } else if (bopfs.length > 0) {
    bopfs.forEach(v => {
      ops += v.left
    })
    msg += `

‚≠ïÔ∏è ÿ¥ŸÖÿß ÿ™ÿπÿØÿßÿØ ${ops} Ÿàÿßÿ≠ÿØ ŸÅÿß⁄©ÿ™Ÿàÿ± ÿ®ÿßÿ≤ ÿÆÿ±€åÿØ ÿØÿßÿ±€åÿØ.`
    msg += `
        
‚≠ïÔ∏è ŸÖ€åÿßŸÜ⁄Ø€åŸÜ ŸÅÿß⁄©ÿ™Ÿàÿ± ÿÆÿ±€åÿØ: ${toman(avg)}
            
‚≠ïÔ∏è ⁄ÜŸÜÿß⁄ÜŸá ŸÇ€åŸÖÿ™ ŸÖÿ∏ŸÜŸá ÿ®Ÿá : ${toman(bill.awkwardness.awk)} ÿ®ÿ±ÿ≥ÿØ 
            
üì£ ŸÅÿß⁄©ÿ™Ÿàÿ± ÿÆÿ±€åÿØ ÿ¥ŸÖÿß ÿ®Ÿá ŸÇ€åŸÖÿ™: ${toman(bill.awkwardness.sellprice)} ÿ≠ÿ±ÿßÿ¨ ŸÖ€å ÿ¥ŸàÿØ. `
  } else {
    msg += `

‚≠ïÔ∏è ŸÖÿπÿßŸÖŸÑÿßÿ™ ÿ¥ŸÖÿß ÿ®ÿ≥ÿ™Ÿá ÿ¥ÿØ Ÿà ÿØÿ± ÿ≠ÿßŸÑ ÿ≠ÿßÿ∂ÿ± ŸÅÿß⁄©ÿ™Ÿàÿ± ÿ®ÿßÿ≤€å ŸÜÿØÿßÿ±€åÿØ`
  }

  msg += `
        
        üí∂ ŸÖŸàÿ¨ŸàÿØ€å ÿ¥ŸÖÿß ÿ®ÿ±ÿßÿ®ÿ± ÿßÿ≥ÿ™ ÿ®ÿß : ${toman(user.charge)}`
  return msg
}

const billToSring = async (bill, result, user) => {
  var res

  let { totalCommition, totalProfit } = result

  let final = totalProfit - totalCommition

  var isSell = bill.isSell

  var tot = 0

  // let user = await User.findOne({
  //   userId: bill.userId
  // })

  let bills = await Bill.find({
    userId: bill.userId,
    closed: true,
    left: {
      $gt: 0
    }
  })

  var avg0 = 0
  var avg1 = 0
  var tot0 = 0
  var tot1 = 0
  while (bills.length > 0) {
    var b = bills.pop()
    if (b.due == 0) {
      if (b.isSell) tot0 += b.left
      else tot0 -= b.left
      avg0 += (b.isSell ? b.left : 0 - b.left) * b.price
    } else {
      if (b.isSell) tot1 += b.left
      else tot1 -= b.left
      avg1 += (b.isSell ? b.left : 0 - b.left) * b.price
    }
  }

  if (tot0 != 0) avg0 /= tot0
  if (tot1 != 0) avg1 /= tot1

  let ft = ''
  if (final < 0) {
    ft = 'ÿ∂ÿ±ÿ± üòî'
    final = Math.abs(final)
  } else if(final == 0) {
    ft = ''
  } else  ft = 'ÿ≥ŸàÿØ ü§©'

  var sample = `ŸÖÿπÿßŸÖŸÑŸá ⁄Øÿ± ⁄Øÿ±ÿßŸÖ€å x
  x ŸÖŸÇÿØÿßÿ± x: x Ÿàÿßÿ≠ÿØ ÿ®Ÿá ŸÇ€åŸÖÿ™: x
  üìà ÿ≥ŸàÿØ €åÿß ÿ≤€åÿßŸÜ ÿ¥ŸÖÿß: x x z z
  üí∞ŸÖŸàÿ¨ŸàÿØŸä ÿ¥ŸÖÿß : x ÿ™ŸàŸÖÿßŸÜ`

  var awkMsg = `
  üîò ÿ¥ŸÖÿß ÿ™ÿπÿØÿßÿØ x Ÿàÿßÿ≠ÿØ ŸÅÿß⁄©ÿ™Ÿàÿ± ÿ®ÿßÿ≤ x x ÿØÿßÿ±€åÿØ.
  üîò ŸÖ€åÿßŸÜ⁄Ø€åŸÜ ŸÅÿß⁄©ÿ™Ÿàÿ± x: x
  ‚õîÔ∏è ⁄ÜŸÜÿß⁄ÜŸá ŸÇ€åŸÖÿ™ ŸÖÿ∏ŸÜŸá ÿ®Ÿá : x ÿ®ÿ±ÿ≥ÿØ ŸÅÿß⁄©ÿ™Ÿàÿ± ÿÆÿ±€åÿØ ÿ¥ŸÖÿß ÿ®Ÿá ŸÇ€åŸÖÿ™: x ÿ≠ÿ±ÿßÿ¨ ŸÖ€å ÿ¥ŸàÿØ.
  `

  var awkpart0 = ''
  var awkpart1 = ''

  if (tot0 != 0) {
    isSell = tot0 > 0
    tot0 = Math.abs(tot0)
    awkpart0 = awkMsg
      .replace('x', tot0)
      .replace('x', isSell ? 'ŸÅÿ±Ÿàÿ¥' : 'ÿÆÿ±€åÿØ')
      .replace('x', 'ÿßŸÖÿ±Ÿàÿ≤€å')
      .replace('x', isSell ? 'ŸÅÿ±Ÿàÿ¥' : 'ÿÆÿ±€åÿØ')
      .replace('x', Math.abs(avg0))
      .replace('x', toman(user.awkwardness.d0.awk))
      .replace('x', toman(user.awkwardness.d0.sellprice))
  }

  if (tot1 != 0) {
    isSell = tot1 > 0
    tot1 = Math.abs(tot1)
    awkpart1 = awkMsg
      .replace('x', tot1)
      .replace('x', isSell ? 'ŸÅÿ±Ÿàÿ¥' : 'ÿÆÿ±€åÿØ')
      .replace('x', 'ŸÅÿ±ÿØÿß€å€å')
      .replace('x', isSell ? 'ŸÅÿ±Ÿàÿ¥' : 'ÿÆÿ±€åÿØ')
      .replace('x', Math.abs(avg1))
      .replace('x', toman(user.awkwardness.d1.awk))
      .replace('x', toman(user.awkwardness.d1.sellprice))
  }

  res = sample
    .replace('x', user.name)
    .replace('x', bill.isSell ? 'üî¥' : 'üîµ')
    .replace('x', bill.isSell ? 'ŸÅÿ±Ÿàÿ¥' : 'ÿÆÿ±€åÿØ')
    .replace('x', bill.amount)
    .replace('x', bill.price)
    .replace('x', final)
    .replace('x', ft)
    .replace('x', toman(user.charge))
    .replace('z', awkpart0)
    .replace('z', awkpart1)

  return res
}

module.exports = {
  billToSring,
  buyerBillToString,
  sellerBillToString
}
